; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	d:\source\blog posts\libraries\c\TestCharFrequncy.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG3965	DB	0aH, 'Printing frequency list:', 00H
	ORG $+2
$SG3970	DB	0aH, ' %c - %i.', 00H
	ORG $+1
$SG3971	DB	0aH, 00H
	ORG $+2
$SG4029	DB	'Abc', 00H
$SG4030	DB	0aH, 'Testing in ''Abc''.', 0aH, 00H
$SG4031	DB	0aH, 'Frequency of ''A'': %i', 0aH, 00H
	ORG $+1
$SG4032	DB	0aH, 'Frequency of ''b'': %i', 0aH, 00H
	ORG $+1
$SG4033	DB	0aH, 'Frequency of ''c'': %i', 0aH, 00H
	ORG $+1
$SG4034	DB	0aH, 'Frequency of ''d'': %i', 0aH, 00H
	ORG $+1
$SG4035	DB	'AbcAAbd', 00H
$SG4036	DB	0aH, 'Testing in ''AbcAAbd''.', 0aH, 00H
$SG4037	DB	0aH, 'Frequency of ''A'': %i', 0aH, 00H
	ORG $+1
$SG4038	DB	0aH, 'Frequency of ''b'': %i', 0aH, 00H
	ORG $+1
$SG4039	DB	0aH, 'Frequency of ''c'': %i', 0aH, 00H
	ORG $+1
$SG4040	DB	0aH, 'Frequency of ''d'': %i', 0aH, 00H
_DATA	ENDS
PUBLIC	_Contains
; Function compile flags: /Odtp
_TEXT	SEGMENT
_curr$ = -4						; size = 4
_ch$ = 8						; size = 1
_cf$ = 12						; size = 4
_Contains PROC
; File d:\source\blog posts\libraries\c\charfrequency.c
; Line 15
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 16
	mov	eax, DWORD PTR _cf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _curr$[ebp], ecx
; Line 17
	cmp	DWORD PTR _curr$[ebp], 0
	jne	SHORT $LN3@Contains
; Line 18
	xor	eax, eax
	jmp	SHORT $LN5@Contains
$LN3@Contains:
; Line 20
	cmp	DWORD PTR _curr$[ebp], 0
	je	SHORT $LN2@Contains
; Line 21
	mov	edx, DWORD PTR _curr$[ebp]
	movsx	eax, BYTE PTR [edx]
	movsx	ecx, BYTE PTR _ch$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN1@Contains
; Line 22
	mov	eax, 1
	jmp	SHORT $LN5@Contains
$LN1@Contains:
; Line 23
	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _curr$[ebp], eax
; Line 24
	jmp	SHORT $LN3@Contains
$LN2@Contains:
; Line 25
	xor	eax, eax
$LN5@Contains:
; Line 26
	mov	esp, ebp
	pop	ebp
	ret	0
_Contains ENDP
_TEXT	ENDS
PUBLIC	_GetFrequency
; Function compile flags: /Odtp
_TEXT	SEGMENT
_curr$ = -4						; size = 4
_ch$ = 8						; size = 1
_cf$ = 12						; size = 4
_GetFrequency PROC
; Line 29
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 30
	mov	eax, DWORD PTR _cf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _curr$[ebp], ecx
; Line 31
	cmp	DWORD PTR _curr$[ebp], 0
	jne	SHORT $LN3@GetFrequen
; Line 32
	xor	eax, eax
	jmp	SHORT $LN5@GetFrequen
$LN3@GetFrequen:
; Line 34
	cmp	DWORD PTR _curr$[ebp], 0
	je	SHORT $LN2@GetFrequen
; Line 35
	mov	edx, DWORD PTR _curr$[ebp]
	movsx	eax, BYTE PTR [edx]
	movsx	ecx, BYTE PTR _ch$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN1@GetFrequen
; Line 36
	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx+4]
	jmp	SHORT $LN5@GetFrequen
$LN1@GetFrequen:
; Line 37
	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _curr$[ebp], ecx
; Line 38
	jmp	SHORT $LN3@GetFrequen
$LN2@GetFrequen:
; Line 39
	xor	eax, eax
$LN5@GetFrequen:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	0
_GetFrequency ENDP
_TEXT	ENDS
PUBLIC	_PrintFrequencyList
EXTRN	_printf:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_curr$ = -4						; size = 4
_cf$ = 8						; size = 4
_PrintFrequencyList PROC
; Line 43
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 44
	mov	eax, DWORD PTR _cf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _curr$[ebp], ecx
; Line 45
	push	OFFSET $SG3965
	call	_printf
	add	esp, 4
$LN2@PrintFrequ:
; Line 46
	cmp	DWORD PTR _curr$[ebp], 0
	je	SHORT $LN1@PrintFrequ
; Line 47
	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _curr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	push	edx
	push	OFFSET $SG3970
	call	_printf
	add	esp, 12					; 0000000cH
; Line 48
	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _curr$[ebp], ecx
; Line 49
	jmp	SHORT $LN2@PrintFrequ
$LN1@PrintFrequ:
; Line 50
	push	OFFSET $SG3971
	call	_printf
	add	esp, 4
; Line 51
	mov	esp, ebp
	pop	ebp
	ret	0
_PrintFrequencyList ENDP
_TEXT	ENDS
PUBLIC	_BumpFrequency
PUBLIC	_Insert
PUBLIC	_Initialize
; Function compile flags: /Odtp
_TEXT	SEGMENT
_input$ = 8						; size = 4
_cf$ = 12						; size = 4
_Initialize PROC
; Line 54
	push	ebp
	mov	ebp, esp
; Line 55
	cmp	DWORD PTR _cf$[ebp], 0
	jne	SHORT $LN6@Initialize
	jmp	SHORT $LN7@Initialize
$LN6@Initialize:
; Line 56
	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN4@Initialize
	jmp	SHORT $LN7@Initialize
$LN4@Initialize:
; Line 57
	mov	eax, DWORD PTR _input$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN7@Initialize
; Line 58
	mov	edx, DWORD PTR _cf$[ebp]
	push	edx
	mov	eax, DWORD PTR _input$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@Initialize
; Line 59
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _input$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	_Insert
	add	esp, 8
	mov	edx, DWORD PTR _cf$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 61
	jmp	SHORT $LN1@Initialize
$LN2@Initialize:
; Line 62
	mov	eax, DWORD PTR _cf$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	call	_BumpFrequency
	add	esp, 8
$LN1@Initialize:
; Line 64
	mov	ecx, DWORD PTR _input$[ebp]
	add	ecx, 1
	mov	DWORD PTR _input$[ebp], ecx
; Line 65
	jmp	SHORT $LN4@Initialize
$LN7@Initialize:
; Line 66
	pop	ebp
	ret	0
_Initialize ENDP
_TEXT	ENDS
PUBLIC	_CreateEmptyCharFrequency
PUBLIC	_SetupCharFrequency
; Function compile flags: /Odtp
_TEXT	SEGMENT
_cf$ = -4						; size = 4
_input$ = 8						; size = 4
_SetupCharFrequency PROC
; Line 69
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 70
	call	_CreateEmptyCharFrequency
	mov	DWORD PTR _cf$[ebp], eax
; Line 71
	mov	eax, DWORD PTR _cf$[ebp]
	mov	DWORD PTR [eax], OFFSET _Contains
; Line 72
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET _GetFrequency
; Line 73
	mov	edx, DWORD PTR _cf$[ebp]
	mov	DWORD PTR [edx+8], OFFSET _PrintFrequencyList
; Line 74
	mov	eax, DWORD PTR _cf$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 75
	mov	ecx, DWORD PTR _cf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_Initialize
	add	esp, 8
; Line 76
	mov	eax, DWORD PTR _cf$[ebp]
; Line 77
	mov	esp, ebp
	pop	ebp
	ret	0
_SetupCharFrequency ENDP
_TEXT	ENDS
EXTRN	_malloc:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_cf$ = -4						; size = 4
_CreateEmptyCharFrequency PROC
; Line 80
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 81
	push	16					; 00000010H
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _cf$[ebp], eax
; Line 82
	cmp	DWORD PTR _cf$[ebp], 0
	jne	SHORT $LN1@CreateEmpt
; Line 83
	push	16					; 00000010H
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _cf$[ebp], eax
$LN1@CreateEmpt:
; Line 85
	mov	eax, DWORD PTR _cf$[ebp]
; Line 86
	mov	esp, ebp
	pop	ebp
	ret	0
_CreateEmptyCharFrequency ENDP
_TEXT	ENDS
PUBLIC	_CreateEmptyCharIntNode
; Function compile flags: /Odtp
_TEXT	SEGMENT
_cin$ = -4						; size = 4
_CreateEmptyCharIntNode PROC
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 90
	push	4
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _cin$[ebp], eax
; Line 91
	cmp	DWORD PTR _cin$[ebp], 0
	jne	SHORT $LN1@CreateEmpt@2
; Line 92
	push	4
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _cin$[ebp], eax
$LN1@CreateEmpt@2:
; Line 94
	mov	eax, DWORD PTR _cin$[ebp]
; Line 95
	mov	esp, ebp
	pop	ebp
	ret	0
_CreateEmptyCharIntNode ENDP
; Function compile flags: /Odtp
_tmp$ = -4						; size = 4
_ch$ = 8						; size = 1
_head$ = 12						; size = 4
_Insert	PROC
; Line 98
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 99
	call	_CreateEmptyCharIntNode
	mov	DWORD PTR _tmp$[ebp], eax
; Line 100
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	cl, BYTE PTR _ch$[ebp]
	mov	BYTE PTR [eax], cl
; Line 101
	mov	edx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [edx+4], 1
; Line 102
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	ecx, DWORD PTR _head$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 103
	mov	edx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _head$[ebp], edx
; Line 104
	mov	eax, DWORD PTR _head$[ebp]
; Line 105
	mov	esp, ebp
	pop	ebp
	ret	0
_Insert	ENDP
; Function compile flags: /Odtp
_curr$ = -4						; size = 4
_ch$ = 8						; size = 1
_head$ = 12						; size = 4
_BumpFrequency PROC
; Line 108
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 109
	mov	eax, DWORD PTR _head$[ebp]
	mov	DWORD PTR _curr$[ebp], eax
; Line 110
	cmp	DWORD PTR _curr$[ebp], 0
	jne	SHORT $LN3@BumpFreque
; Line 111
	jmp	SHORT $LN5@BumpFreque
$LN3@BumpFreque:
; Line 113
	cmp	DWORD PTR _curr$[ebp], 0
	je	SHORT $LN5@BumpFreque
; Line 114
	mov	ecx, DWORD PTR _curr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	movsx	eax, BYTE PTR _ch$[ebp]
	cmp	edx, eax
	jne	SHORT $LN1@BumpFreque
; Line 115
	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _curr$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 116
	jmp	SHORT $LN5@BumpFreque
$LN1@BumpFreque:
; Line 118
	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _curr$[ebp], edx
; Line 119
	jmp	SHORT $LN3@BumpFreque
$LN5@BumpFreque:
; Line 120
	mov	esp, ebp
	pop	ebp
	ret	0
_BumpFrequency ENDP
_TEXT	ENDS
PUBLIC	_main
EXTRN	_free:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_cf$ = -4						; size = 4
_main	PROC
; File d:\source\blog posts\libraries\c\testcharfrequncy.c
; Line 4
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 5
	push	OFFSET $SG4029
	call	_SetupCharFrequency
	add	esp, 4
	mov	DWORD PTR _cf$[ebp], eax
; Line 6
	push	OFFSET $SG4030
	call	_printf
	add	esp, 4
; Line 7
	mov	eax, DWORD PTR _cf$[ebp]
	push	eax
	push	65					; 00000041H
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 8
	push	eax
	push	OFFSET $SG4031
	call	_printf
	add	esp, 8
; Line 8
	mov	eax, DWORD PTR _cf$[ebp]
	push	eax
	push	98					; 00000062H
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 8
	push	eax
	push	OFFSET $SG4032
	call	_printf
	add	esp, 8
; Line 9
	mov	eax, DWORD PTR _cf$[ebp]
	push	eax
	push	99					; 00000063H
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 8
	push	eax
	push	OFFSET $SG4033
	call	_printf
	add	esp, 8
; Line 10
	mov	eax, DWORD PTR _cf$[ebp]
	push	eax
	push	100					; 00000064H
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 8
	push	eax
	push	OFFSET $SG4034
	call	_printf
	add	esp, 8
; Line 11
	mov	eax, DWORD PTR _cf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cf$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 4
; Line 12
	mov	eax, DWORD PTR _cf$[ebp]
	push	eax
	call	_free
	add	esp, 4
; Line 13
	push	OFFSET $SG4035
	call	_SetupCharFrequency
	add	esp, 4
	mov	DWORD PTR _cf$[ebp], eax
; Line 14
	push	OFFSET $SG4036
	call	_printf
	add	esp, 4
; Line 15
	mov	ecx, DWORD PTR _cf$[ebp]
	push	ecx
	push	65					; 00000041H
	mov	edx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	push	eax
	push	OFFSET $SG4037
	call	_printf
	add	esp, 8
; Line 16
	mov	ecx, DWORD PTR _cf$[ebp]
	push	ecx
	push	98					; 00000062H
	mov	edx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	push	eax
	push	OFFSET $SG4038
	call	_printf
	add	esp, 8
; Line 17
	mov	ecx, DWORD PTR _cf$[ebp]
	push	ecx
	push	99					; 00000063H
	mov	edx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	push	eax
	push	OFFSET $SG4039
	call	_printf
	add	esp, 8
; Line 18
	mov	ecx, DWORD PTR _cf$[ebp]
	push	ecx
	push	100					; 00000064H
	mov	edx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 8
	push	eax
	push	OFFSET $SG4040
	call	_printf
	add	esp, 8
; Line 19
	mov	ecx, DWORD PTR _cf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cf$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
; Line 20
	xor	eax, eax
; Line 21
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
END
