; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

	TITLE	d:\source\blog posts\linked lists\linked list test.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG4315	DB	0aH, 'Found %d in list.', 00H
	ORG $+1
$SG4317	DB	0aH, 'Did not find %d in list.', 00H
	ORG $+2
$SG4322	DB	0aH, 'Found %d in list.', 00H
	ORG $+1
$SG4324	DB	0aH, 'Did not find %d in list.', 00H
	ORG $+2
$SG4329	DB	0aH, 'Deleted first %d.', 00H
	ORG $+1
$SG4331	DB	0aH, 'Deleted first %d.', 00H
	ORG $+1
$SG4333	DB	0aH, 'Did not find %d in list.', 00H
	ORG $+2
$SG4335	DB	0aH, 'Deleted first %d.', 00H
	ORG $+1
$SG4337	DB	0aH, 'Did not find %d in list.', 00H
	ORG $+2
$SG4350	DB	0aH, 'All %d deleted from list.', 00H
	ORG $+1
$SG4352	DB	0aH, 'Did not find %d in list.', 00H
	ORG $+2
$SG4355	DB	0aH, 'Circular list test: list should not be circular.', 00H
	ORG $+2
$SG4357	DB	0aH, 'list is circular.', 00H
	ORG $+1
$SG4359	DB	0aH, 'list is not circular.', 00H
	ORG $+1
$SG4362	DB	0aH, 'Circular list test: list should be circular.', 00H
	ORG $+2
$SG4364	DB	0aH, 'list is circular.', 00H
	ORG $+1
$SG4366	DB	0aH, 'list is not circular.', 00H
	ORG $+1
$SG4375	DB	0aH, 'Circular list test: list should be circular.', 00H
	ORG $+2
$SG4377	DB	0aH, 'list is circular.', 00H
	ORG $+1
$SG4379	DB	0aH, 'list is not circular.', 00H
	ORG $+1
$SG4380	DB	0aH, 'Circular list test: list should not be circular.', 00H
	ORG $+2
$SG4382	DB	0aH, 'list is circular.', 00H
	ORG $+1
$SG4384	DB	0aH, 'list is not circular.', 00H
	ORG $+1
$SG4390	DB	0aH, 'Should have inserted %d at the beginning: ', 00H
$SG4396	DB	0aH, 'Should have inserted %d at the end: ', 00H
	ORG $+2
$SG4402	DB	0aH, 'Should have inserted %d at the mid: ', 00H
_DATA	ENDS
PUBLIC	_TEST_should_setup_and_confim_via_printing
PUBLIC	_TEST_should_find_number_in_list
PUBLIC	_TEST_should_not_find_number_in_list
PUBLIC	_TEST_should_delete_numbers_first_occurence
PUBLIC	_TEST_should_delete_all_occurences_on_a_number
PUBLIC	_TEST_shoud_not_be_a_circular_list
PUBLIC	_TEST_shoud_be_a_circular_list
PUBLIC	_TEST_stack_should_be_reverse_of_the_list
PUBLIC	_TEST_should_make_a_circular_list_acircular
PUBLIC	_TEST_should_add_node_at_beginning_of_list
PUBLIC	_TEST_should_add_node_at_end_of_list
PUBLIC	_TEST_should_add_node_at_mid_of_list
EXTRN	_printf:PROC
EXTRN	_create_node:PROC
EXTRN	_add_to_list:PROC
EXTRN	_insert_in_list:PROC
EXTRN	_make_list_circular:PROC
EXTRN	_make_list_acircular:PROC
EXTRN	_print_list:PROC
EXTRN	_search_list_for_integer:PROC
EXTRN	_delete_first_integer_value_matching_node:PROC
EXTRN	_delete_all_integer_value_matching_nodes:PROC
EXTRN	_is_list_circular:PROC
EXTRN	_create_stack_from_existing_list:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_head$ = -8						; size = 4
_num$ = -4						; size = 4
_TEST_should_add_node_at_mid_of_list PROC
; File d:\source\blog posts\linked lists\linked list test.c
; Line 153
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 154
	call	_TEST_should_setup_and_confim_via_printing
	mov	DWORD PTR _head$[ebp], eax
; Line 155
	mov	DWORD PTR _num$[ebp], 10		; 0000000aH
; Line 156
	push	2
	push	1
	lea	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _head$[ebp]
	push	ecx
	call	_insert_in_list
	add	esp, 16					; 00000010H
; Line 157
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	push	OFFSET $SG4402
	call	_printf
	add	esp, 8
; Line 158
	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	call	_print_list
	add	esp, 4
; Line 159
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_should_add_node_at_mid_of_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_head$ = -8						; size = 4
_num$ = -4						; size = 4
_TEST_should_add_node_at_end_of_list PROC
; File d:\source\blog posts\linked lists\linked list test.c
; Line 144
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 145
	call	_TEST_should_setup_and_confim_via_printing
	mov	DWORD PTR _head$[ebp], eax
; Line 146
	mov	DWORD PTR _num$[ebp], 10		; 0000000aH
; Line 147
	push	0
	push	1
	lea	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _head$[ebp]
	push	ecx
	call	_insert_in_list
	add	esp, 16					; 00000010H
; Line 148
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	push	OFFSET $SG4396
	call	_printf
	add	esp, 8
; Line 149
	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	call	_print_list
	add	esp, 4
; Line 150
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_should_add_node_at_end_of_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_head$ = -8						; size = 4
_num$ = -4						; size = 4
_TEST_should_add_node_at_beginning_of_list PROC
; File d:\source\blog posts\linked lists\linked list test.c
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 136
	call	_TEST_should_setup_and_confim_via_printing
	mov	DWORD PTR _head$[ebp], eax
; Line 137
	mov	DWORD PTR _num$[ebp], 10		; 0000000aH
; Line 138
	push	1
	push	1
	lea	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _head$[ebp]
	push	ecx
	call	_insert_in_list
	add	esp, 16					; 00000010H
; Line 139
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	push	OFFSET $SG4390
	call	_printf
	add	esp, 8
; Line 140
	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	call	_print_list
	add	esp, 4
; Line 141
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_should_add_node_at_beginning_of_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_head$ = -4						; size = 4
_TEST_should_make_a_circular_list_acircular PROC
; File d:\source\blog posts\linked lists\linked list test.c
; Line 111
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 112
	call	_TEST_should_setup_and_confim_via_printing
	mov	DWORD PTR _head$[ebp], eax
; Line 113
	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	call	_print_list
	add	esp, 4
; Line 114
	mov	ecx, DWORD PTR _head$[ebp]
	push	ecx
	call	_make_list_circular
	add	esp, 4
; Line 116
	push	OFFSET $SG4375
	call	_printf
	add	esp, 4
; Line 117
	mov	edx, DWORD PTR _head$[ebp]
	push	edx
	call	_print_list
	add	esp, 4
; Line 118
	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	call	_is_list_circular
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@TEST_shoul
; Line 119
	push	OFFSET $SG4377
	call	_printf
	add	esp, 4
; Line 121
	jmp	SHORT $LN3@TEST_shoul
$LN4@TEST_shoul:
; Line 122
	push	OFFSET $SG4379
	call	_printf
	add	esp, 4
$LN3@TEST_shoul:
; Line 124
	mov	ecx, DWORD PTR _head$[ebp]
	push	ecx
	call	_make_list_acircular
	add	esp, 4
; Line 125
	push	OFFSET $SG4380
	call	_printf
	add	esp, 4
; Line 126
	mov	edx, DWORD PTR _head$[ebp]
	push	edx
	call	_is_list_circular
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@TEST_shoul
; Line 127
	push	OFFSET $SG4382
	call	_printf
	add	esp, 4
; Line 129
	jmp	SHORT $LN5@TEST_shoul
$LN2@TEST_shoul:
; Line 130
	push	OFFSET $SG4384
	call	_printf
	add	esp, 4
$LN5@TEST_shoul:
; Line 132
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_should_make_a_circular_list_acircular ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_stackTop$ = -8						; size = 4
_head$ = -4						; size = 4
_TEST_stack_should_be_reverse_of_the_list PROC
; File d:\source\blog posts\linked lists\linked list test.c
; Line 104
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 105
	call	_TEST_should_setup_and_confim_via_printing
	mov	DWORD PTR _head$[ebp], eax
; Line 106
	push	0
	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	call	_create_stack_from_existing_list
	add	esp, 8
	mov	DWORD PTR _stackTop$[ebp], eax
; Line 107
	mov	ecx, DWORD PTR _stackTop$[ebp]
	push	ecx
	call	_print_list
	add	esp, 4
; Line 108
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_stack_should_be_reverse_of_the_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_head$ = -4						; size = 4
_TEST_shoud_be_a_circular_list PROC
; File d:\source\blog posts\linked lists\linked list test.c
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 90
	call	_TEST_should_setup_and_confim_via_printing
	mov	DWORD PTR _head$[ebp], eax
; Line 91
	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	call	_print_list
	add	esp, 4
; Line 92
	mov	ecx, DWORD PTR _head$[ebp]
	push	ecx
	call	_make_list_circular
	add	esp, 4
; Line 94
	push	OFFSET $SG4362
	call	_printf
	add	esp, 4
; Line 95
	mov	edx, DWORD PTR _head$[ebp]
	push	edx
	call	_print_list
	add	esp, 4
; Line 96
	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	call	_is_list_circular
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@TEST_shoud
; Line 97
	push	OFFSET $SG4364
	call	_printf
	add	esp, 4
; Line 99
	jmp	SHORT $LN3@TEST_shoud
$LN2@TEST_shoud:
; Line 100
	push	OFFSET $SG4366
	call	_printf
	add	esp, 4
$LN3@TEST_shoud:
; Line 102
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_shoud_be_a_circular_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_head$ = -4						; size = 4
_TEST_shoud_not_be_a_circular_list PROC
; File d:\source\blog posts\linked lists\linked list test.c
; Line 76
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 77
	call	_TEST_should_setup_and_confim_via_printing
	mov	DWORD PTR _head$[ebp], eax
; Line 78
	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	call	_print_list
	add	esp, 4
; Line 79
	push	OFFSET $SG4355
	call	_printf
	add	esp, 4
; Line 80
	mov	ecx, DWORD PTR _head$[ebp]
	push	ecx
	call	_is_list_circular
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@TEST_shoud
; Line 81
	push	OFFSET $SG4357
	call	_printf
	add	esp, 4
; Line 83
	jmp	SHORT $LN3@TEST_shoud
$LN2@TEST_shoud:
; Line 84
	push	OFFSET $SG4359
	call	_printf
	add	esp, 4
$LN3@TEST_shoud:
; Line 86
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_shoud_not_be_a_circular_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_head$ = -8						; size = 4
_num$ = -4						; size = 4
_TEST_should_delete_all_occurences_on_a_number PROC
; File d:\source\blog posts\linked lists\linked list test.c
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 65
	call	_TEST_should_setup_and_confim_via_printing
	mov	DWORD PTR _head$[ebp], eax
; Line 66
	mov	DWORD PTR _num$[ebp], 2
; Line 67
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _head$[ebp]
	push	ecx
	call	_delete_all_integer_value_matching_nodes
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@TEST_shoul
; Line 68
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	push	OFFSET $SG4350
	call	_printf
	add	esp, 8
; Line 70
	jmp	SHORT $LN1@TEST_shoul
$LN2@TEST_shoul:
; Line 71
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	push	OFFSET $SG4352
	call	_printf
	add	esp, 8
$LN1@TEST_shoul:
; Line 73
	mov	ecx, DWORD PTR _head$[ebp]
	push	ecx
	call	_print_list
	add	esp, 4
; Line 74
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_should_delete_all_occurences_on_a_number ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_head$ = -8						; size = 4
_num$ = -4						; size = 4
_TEST_should_delete_numbers_first_occurence PROC
; File d:\source\blog posts\linked lists\linked list test.c
; Line 26
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 27
	call	_TEST_should_setup_and_confim_via_printing
	mov	DWORD PTR _head$[ebp], eax
; Line 28
	mov	DWORD PTR _num$[ebp], 2
; Line 29
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _head$[ebp]
	push	ecx
	call	_delete_first_integer_value_matching_node
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@TEST_shoul
; Line 30
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	push	OFFSET $SG4329
	call	_printf
	add	esp, 8
; Line 31
	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	call	_print_list
	add	esp, 4
$LN5@TEST_shoul:
; Line 33
	mov	DWORD PTR _num$[ebp], 4
; Line 34
	mov	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	edx, DWORD PTR _head$[ebp]
	push	edx
	call	_delete_first_integer_value_matching_node
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@TEST_shoul
; Line 35
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	push	OFFSET $SG4331
	call	_printf
	add	esp, 8
; Line 36
	mov	ecx, DWORD PTR _head$[ebp]
	push	ecx
	call	_print_list
	add	esp, 4
; Line 38
	jmp	SHORT $LN3@TEST_shoul
$LN4@TEST_shoul:
; Line 39
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	push	OFFSET $SG4333
	call	_printf
	add	esp, 8
; Line 40
	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	call	_print_list
	add	esp, 4
$LN3@TEST_shoul:
; Line 42
	mov	DWORD PTR _num$[ebp], 1
; Line 43
	push	1
	mov	ecx, DWORD PTR _head$[ebp]
	push	ecx
	call	_delete_first_integer_value_matching_node
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@TEST_shoul
; Line 44
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	push	OFFSET $SG4335
	call	_printf
	add	esp, 8
; Line 45
	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	call	_print_list
	add	esp, 4
; Line 47
	jmp	SHORT $LN6@TEST_shoul
$LN2@TEST_shoul:
; Line 48
	mov	ecx, DWORD PTR _num$[ebp]
	push	ecx
	push	OFFSET $SG4337
	call	_printf
	add	esp, 8
; Line 49
	mov	edx, DWORD PTR _head$[ebp]
	push	edx
	call	_print_list
	add	esp, 4
$LN6@TEST_shoul:
; Line 51
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_should_delete_numbers_first_occurence ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_head$ = -8						; size = 4
_num$ = -4						; size = 4
_TEST_should_not_find_number_in_list PROC
; File d:\source\blog posts\linked lists\linked list test.c
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 16
	call	_TEST_should_setup_and_confim_via_printing
	mov	DWORD PTR _head$[ebp], eax
; Line 17
	mov	DWORD PTR _num$[ebp], -1
; Line 18
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _head$[ebp]
	push	ecx
	call	_search_list_for_integer
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@TEST_shoul
; Line 19
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	push	OFFSET $SG4322
	call	_printf
	add	esp, 8
; Line 21
	jmp	SHORT $LN3@TEST_shoul
$LN2@TEST_shoul:
; Line 22
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	push	OFFSET $SG4324
	call	_printf
	add	esp, 8
$LN3@TEST_shoul:
; Line 24
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_should_not_find_number_in_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_head$ = -8						; size = 4
_num$ = -4						; size = 4
_TEST_should_find_number_in_list PROC
; File d:\source\blog posts\linked lists\linked list test.c
; Line 3
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 4
	call	_TEST_should_setup_and_confim_via_printing
	mov	DWORD PTR _head$[ebp], eax
; Line 5
	mov	DWORD PTR _num$[ebp], 2
; Line 6
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _head$[ebp]
	push	ecx
	call	_search_list_for_integer
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@TEST_shoul
; Line 7
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	push	OFFSET $SG4315
	call	_printf
	add	esp, 8
; Line 9
	jmp	SHORT $LN3@TEST_shoul
$LN2@TEST_shoul:
; Line 10
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	push	OFFSET $SG4317
	call	_printf
	add	esp, 8
$LN3@TEST_shoul:
; Line 13
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_should_find_number_in_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_head$ = -8						; size = 4
_num$ = -4						; size = 4
_TEST_should_setup_and_confim_via_printing PROC
; File d:\source\blog posts\linked lists\linked list test.c
; Line 53
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 54
	mov	DWORD PTR _num$[ebp], 1
; Line 55
	push	1
	lea	eax, DWORD PTR _num$[ebp]
	push	eax
	call	_create_node
	add	esp, 8
	mov	DWORD PTR _head$[ebp], eax
; Line 56
	mov	ecx, DWORD PTR _num$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num$[ebp], ecx
	push	1
	lea	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	call	_add_to_list
	add	esp, 12					; 0000000cH
; Line 57
	mov	ecx, DWORD PTR _num$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num$[ebp], ecx
	push	1
	lea	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	call	_add_to_list
	add	esp, 12					; 0000000cH
; Line 58
	mov	ecx, DWORD PTR _num$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num$[ebp], ecx
	push	1
	lea	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	call	_add_to_list
	add	esp, 12					; 0000000cH
; Line 59
	mov	ecx, DWORD PTR _num$[ebp]
	add	ecx, 1
	mov	DWORD PTR _num$[ebp], ecx
	push	1
	lea	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	eax, DWORD PTR _head$[ebp]
	push	eax
	call	_add_to_list
	add	esp, 12					; 0000000cH
; Line 60
	mov	ecx, DWORD PTR _head$[ebp]
	push	ecx
	call	_print_list
	add	esp, 4
; Line 61
	mov	eax, DWORD PTR _head$[ebp]
; Line 62
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_should_setup_and_confim_via_printing ENDP
_TEXT	ENDS
END
