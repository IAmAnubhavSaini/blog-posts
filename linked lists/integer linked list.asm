; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30723.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	head
PUBLIC	curr
_BSS	SEGMENT
head	DQ	01H DUP (?)
curr	DQ	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG4476	DB	0aH, 'The values of the list are', 0aH, 00H
	ORG $+3
$SG4480	DB	'[%d @ %p]->', 00H
	ORG $+4
$SG4481	DB	'[NULL]', 0aH, 00H
$SG4483	DB	0aH, 'Empty list.', 00H
	ORG $+3
$SG4503	DB	0aH, 'debug: at least two nodes exists.', 00H
	ORG $+5
$SG4510	DB	0aH, 'debug: only one node exists.', 00H
_DATA	ENDS
PUBLIC	create_list
PUBLIC	add_to_list
PUBLIC	print_list
PUBLIC	search_list
PUBLIC	delete_first_value_matching_node
PUBLIC	delete_all_value_matching_nodes
PUBLIC	is_list_empty
EXTRN	printf:PROC
EXTRN	abort:PROC
EXTRN	malloc:PROC
pdata	SEGMENT
$pdata$create_list DD imagerel $LN4
	DD	imagerel $LN4+96
	DD	imagerel $unwind$create_list
$pdata$add_to_list DD imagerel $LN6
	DD	imagerel $LN6+173
	DD	imagerel $unwind$add_to_list
$pdata$print_list DD imagerel $LN7
	DD	imagerel $LN7+115
	DD	imagerel $unwind$print_list
$pdata$search_list DD imagerel $LN6
	DD	imagerel $LN6+76
	DD	imagerel $unwind$search_list
$pdata$delete_first_value_matching_node DD imagerel $LN9
	DD	imagerel $LN9+206
	DD	imagerel $unwind$delete_first_value_matching_node
$pdata$delete_all_value_matching_nodes DD imagerel $LN9
	DD	imagerel $LN9+169
	DD	imagerel $unwind$delete_all_value_matching_nodes
pdata	ENDS
xdata	SEGMENT
$unwind$create_list DD 010801H
	DD	06208H
$unwind$add_to_list DD 010c01H
	DD	0620cH
$unwind$print_list DD 010401H
	DD	06204H
$unwind$search_list DD 010801H
	DD	02208H
$unwind$delete_first_value_matching_node DD 010801H
	DD	08208H
$unwind$delete_all_value_matching_nodes DD 010801H
	DD	04208H
xdata	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
is_list_empty PROC
; File c:\src\blog posts\linked lists\integer linked list.c
; Line 7
	cmp	QWORD PTR head, 0
	jne	SHORT $LN2@is_list_em
; Line 8
	mov	al, 1
	jmp	SHORT $LN3@is_list_em
; Line 9
	jmp	SHORT $LN1@is_list_em
$LN2@is_list_em:
; Line 10
	xor	al, al
$LN1@is_list_em:
$LN3@is_list_em:
; Line 11
	ret	0
is_list_empty ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
isDeleted$ = 0
curr$ = 8
prev$ = 16
val$ = 48
delete_all_value_matching_nodes PROC
; File c:\src\blog posts\linked lists\integer linked list.c
; Line 104
$LN9:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 105
	mov	rax, QWORD PTR head
	mov	QWORD PTR prev$[rsp], rax
; Line 106
	mov	QWORD PTR curr$[rsp], 0
; Line 107
	mov	BYTE PTR isDeleted$[rsp], 0
; Line 108
	mov	rax, QWORD PTR head
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN6@delete_all
; Line 109
	mov	rax, QWORD PTR head
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR curr$[rsp], rax
$LN5@delete_all:
; Line 110
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN4@delete_all
; Line 111
	mov	rax, QWORD PTR curr$[rsp]
	mov	ecx, DWORD PTR val$[rsp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN3@delete_all
; Line 112
	mov	BYTE PTR isDeleted$[rsp], 1
; Line 113
	mov	rax, QWORD PTR prev$[rsp]
	mov	rcx, QWORD PTR curr$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
$LN3@delete_all:
; Line 116
	mov	rax, QWORD PTR curr$[rsp]
	mov	QWORD PTR prev$[rsp], rax
; Line 117
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR curr$[rsp], rax
; Line 118
	jmp	SHORT $LN5@delete_all
$LN4@delete_all:
; Line 120
	jmp	SHORT $LN2@delete_all
$LN6@delete_all:
; Line 121
	mov	rax, QWORD PTR prev$[rsp]
	mov	ecx, DWORD PTR val$[rsp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN1@delete_all
; Line 122
	mov	BYTE PTR isDeleted$[rsp], 1
; Line 123
	mov	QWORD PTR prev$[rsp], 0
$LN1@delete_all:
$LN2@delete_all:
; Line 126
	movzx	eax, BYTE PTR isDeleted$[rsp]
; Line 127
	add	rsp, 40					; 00000028H
	ret	0
delete_all_value_matching_nodes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
isDeleted$ = 32
curr$ = 40
prev$ = 48
val$ = 80
delete_first_value_matching_node PROC
; File c:\src\blog posts\linked lists\integer linked list.c
; Line 76
$LN9:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H
; Line 77
	mov	rax, QWORD PTR head
	mov	QWORD PTR prev$[rsp], rax
; Line 78
	mov	QWORD PTR curr$[rsp], 0
; Line 79
	mov	BYTE PTR isDeleted$[rsp], 0
; Line 80
	mov	rax, QWORD PTR head
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN6@delete_fir
; Line 81
	mov	rax, QWORD PTR head
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR curr$[rsp], rax
; Line 82
	lea	rcx, OFFSET FLAT:$SG4503
	call	printf
$LN5@delete_fir:
; Line 83
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN4@delete_fir
	movzx	eax, BYTE PTR isDeleted$[rsp]
	test	eax, eax
	jne	SHORT $LN4@delete_fir
; Line 84
	mov	rax, QWORD PTR curr$[rsp]
	mov	ecx, DWORD PTR val$[rsp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN3@delete_fir
; Line 85
	mov	rax, QWORD PTR prev$[rsp]
	mov	rcx, QWORD PTR curr$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
; Line 86
	mov	BYTE PTR isDeleted$[rsp], 1
$LN3@delete_fir:
; Line 89
	mov	rax, QWORD PTR curr$[rsp]
	mov	QWORD PTR prev$[rsp], rax
; Line 90
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR curr$[rsp], rax
; Line 91
	jmp	SHORT $LN5@delete_fir
$LN4@delete_fir:
; Line 93
	jmp	SHORT $LN2@delete_fir
$LN6@delete_fir:
; Line 94
	lea	rcx, OFFSET FLAT:$SG4510
	call	printf
; Line 95
	mov	rax, QWORD PTR prev$[rsp]
	mov	ecx, DWORD PTR val$[rsp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN1@delete_fir
; Line 96
	mov	BYTE PTR isDeleted$[rsp], 1
; Line 98
	mov	QWORD PTR prev$[rsp], 0
$LN1@delete_fir:
$LN2@delete_fir:
; Line 101
	movzx	eax, BYTE PTR isDeleted$[rsp]
; Line 102
	add	rsp, 72					; 00000048H
	ret	0
delete_first_value_matching_node ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
isFound$ = 0
start$ = 8
val$ = 32
search_list PROC
; File c:\src\blog posts\linked lists\integer linked list.c
; Line 63
$LN6:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 64
	mov	rax, QWORD PTR head
	mov	QWORD PTR start$[rsp], rax
; Line 65
	mov	BYTE PTR isFound$[rsp], 0
$LN3@search_lis:
; Line 66
	cmp	QWORD PTR start$[rsp], 0
	je	SHORT $LN2@search_lis
; Line 67
	mov	rax, QWORD PTR start$[rsp]
	mov	ecx, DWORD PTR val$[rsp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN1@search_lis
; Line 68
	mov	BYTE PTR isFound$[rsp], 1
; Line 69
	jmp	SHORT $LN2@search_lis
$LN1@search_lis:
; Line 71
	mov	rax, QWORD PTR start$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR start$[rsp], rax
; Line 72
	jmp	SHORT $LN3@search_lis
$LN2@search_lis:
; Line 73
	movzx	eax, BYTE PTR isFound$[rsp]
; Line 74
	add	rsp, 24
	ret	0
search_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ptr$ = 32
print_list PROC
; File c:\src\blog posts\linked lists\integer linked list.c
; Line 47
$LN7:
	sub	rsp, 56					; 00000038H
; Line 49
	mov	rax, QWORD PTR head
	mov	QWORD PTR ptr$[rsp], rax
; Line 50
	cmp	QWORD PTR ptr$[rsp], 0
	je	SHORT $LN4@print_list
; Line 51
	lea	rcx, OFFSET FLAT:$SG4476
	call	printf
$LN3@print_list:
; Line 52
	cmp	QWORD PTR ptr$[rsp], 0
	je	SHORT $LN2@print_list
; Line 53
	mov	r8, QWORD PTR ptr$[rsp]
	mov	rax, QWORD PTR ptr$[rsp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, OFFSET FLAT:$SG4480
	call	printf
; Line 54
	mov	rax, QWORD PTR ptr$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR ptr$[rsp], rax
; Line 55
	jmp	SHORT $LN3@print_list
$LN2@print_list:
; Line 56
	lea	rcx, OFFSET FLAT:$SG4481
	call	printf
; Line 58
	jmp	SHORT $LN1@print_list
$LN4@print_list:
; Line 59
	lea	rcx, OFFSET FLAT:$SG4483
	call	printf
$LN1@print_list:
; Line 61
	add	rsp, 56					; 00000038H
	ret	0
print_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
newTS$ = 32
val$ = 64
before_head$ = 72
add_to_list PROC
; File c:\src\blog posts\linked lists\integer linked list.c
; Line 26
$LN6:
	mov	BYTE PTR [rsp+16], dl
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 27
	mov	ecx, 16
	call	malloc
	mov	QWORD PTR newTS$[rsp], rax
; Line 28
	call	is_list_empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@add_to_lis
; Line 29
	mov	ecx, DWORD PTR val$[rsp]
	call	create_list
	jmp	SHORT $LN4@add_to_lis
$LN3@add_to_lis:
; Line 32
	movzx	eax, BYTE PTR before_head$[rsp]
	test	eax, eax
	je	SHORT $LN2@add_to_lis
; Line 33
	mov	rax, QWORD PTR newTS$[rsp]
	mov	ecx, DWORD PTR val$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 34
	mov	rax, QWORD PTR newTS$[rsp]
	mov	rcx, QWORD PTR head
	mov	QWORD PTR [rax+8], rcx
; Line 35
	mov	rax, QWORD PTR newTS$[rsp]
	mov	QWORD PTR head, rax
; Line 36
	mov	rax, QWORD PTR head
	jmp	SHORT $LN4@add_to_lis
; Line 38
	jmp	SHORT $LN1@add_to_lis
$LN2@add_to_lis:
; Line 39
	mov	rax, QWORD PTR newTS$[rsp]
	mov	ecx, DWORD PTR val$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 40
	mov	rax, QWORD PTR newTS$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 41
	mov	rax, QWORD PTR curr
	mov	rcx, QWORD PTR newTS$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 42
	mov	rax, QWORD PTR newTS$[rsp]
	mov	QWORD PTR curr, rax
; Line 43
	mov	rax, QWORD PTR curr
$LN1@add_to_lis:
$LN4@add_to_lis:
; Line 45
	add	rsp, 56					; 00000038H
	ret	0
add_to_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ptr$ = 32
val$ = 64
create_list PROC
; File c:\src\blog posts\linked lists\integer linked list.c
; Line 13
$LN4:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 14
	mov	ecx, 16
	call	malloc
	mov	QWORD PTR ptr$[rsp], rax
; Line 15
	cmp	QWORD PTR ptr$[rsp], 0
	jne	SHORT $LN1@create_lis
; Line 16
	call	abort
$LN1@create_lis:
; Line 19
	mov	rax, QWORD PTR ptr$[rsp]
	mov	ecx, DWORD PTR val$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 20
	mov	rax, QWORD PTR ptr$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 22
	mov	rax, QWORD PTR ptr$[rsp]
	mov	QWORD PTR curr, rax
	mov	rax, QWORD PTR curr
	mov	QWORD PTR head, rax
; Line 23
	mov	rax, QWORD PTR ptr$[rsp]
$LN3@create_lis:
; Line 24
	add	rsp, 56					; 00000038H
	ret	0
create_list ENDP
_TEXT	ENDS
END
